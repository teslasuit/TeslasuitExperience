// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RaycastToBuffer
#pragma kernel Prebuild
#pragma kernel CollectBlocks
#pragma kernel ClearBuffer

#include "UnityCG.cginc"

#define groupDim_x 64
#define groupDim_sx 32
#define EPS 1e-10f

struct PrebuiltTriangle
{
	float3 n0;
	float3 n1;
	float3 n2;
	float d0;
	float d1;
	float d2;
};

RWStructuredBuffer<PrebuiltTriangle>	prebuiltTriangles;//SRV
const StructuredBuffer<PrebuiltTriangle>	prebuiltTrianglesConst;//SRV

struct Triangle
{
	float3 v0;
	float3 v1;
	float3 v2;
	float2 uv0;
	float2 uv1;
	float2 uv2;
};

struct RaycastHit
{
	int		triangleIndex;
	float2	uv;
	float	distance;
};

RWStructuredBuffer<RaycastHit>		raycastsOut;//UAV

RWStructuredBuffer<RaycastHit>		raycasts;//
const StructuredBuffer<Triangle>	triangles;//SRV

CBUFFER_START(InRay)
float3	ray_origin;
float3	ray_direction;
uint	ray_index;
uint	raycasts_length;
CBUFFER_END

groupshared RaycastHit sdata[groupDim_x];
groupshared RaycastHit rdata[groupDim_sx];

#define ConditionalSwap(gr_dim, source_buf, gr_size, condition)\
if(gr_dim >= gr_size)\
if(tid < gr_size/2)\
if(condition)\
source_buf[tid] = source_buf[tid + gr_size/2];\

#define ConditionalSwap32(gr_dim, source_buf, gr_size, condition)\
if(gr_dim >= gr_size)\
if(tid < gr_size/2)\
if(condition)\
source_buf[tid] = source_buf[tid + gr_size/2];\


RaycastHit EmptyHit();
RaycastHit HitTriangle(float3 rayO, float3 rayD, uint i);
RaycastHit HitTriangle2(float3 rayO, float3 rayD, uint i);
RaycastHit HitTriangle3(float3 rayO, float3 rayD, uint i);
void PrebuildTriangles(uint i);

[numthreads(groupDim_x, 1, 1)]
void Prebuild(uint3 threadId : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
	unsigned int i = groupId.x*groupDim_x + threadId.x;
	PrebuildTriangles(i);
}


[numthreads(groupDim_x, 1, 1)]
void RaycastToBuffer(uint3 threadId : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
	unsigned int tid = threadId.x;
	unsigned int i = groupId.x*groupDim_x + threadId.x;
	sdata[tid] = HitTriangle3(ray_origin, ray_direction, i);

	GroupMemoryBarrierWithGroupSync();

	ConditionalSwap(groupDim_x, sdata, 1024, sdata[tid].distance > sdata[tid + 512].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_x, sdata, 512, sdata[tid].distance > sdata[tid + 256].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_x, sdata, 256, sdata[tid].distance > sdata[tid + 128].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_x, sdata, 128, sdata[tid].distance > sdata[tid + 64].distance);
	GroupMemoryBarrierWithGroupSync();


	if (tid < 32)
	{
		ConditionalSwap32(groupDim_x, sdata, 64, sdata[tid].distance > sdata[tid + 32].distance	);
		ConditionalSwap32(groupDim_x, sdata, 32, sdata[tid].distance > sdata[tid + 16].distance	);
		ConditionalSwap32(groupDim_x, sdata, 16, sdata[tid].distance > sdata[tid + 8].distance	);
		ConditionalSwap32(groupDim_x, sdata, 8, sdata[tid].distance > sdata[tid + 4].distance	);
		ConditionalSwap32(groupDim_x, sdata, 4, sdata[tid].distance > sdata[tid + 2].distance	);
		ConditionalSwap32(groupDim_x, sdata, 2, sdata[tid].distance > sdata[tid + 1].distance	);
	}

	if (tid == 0)
	{	
		raycasts[groupId.x] = sdata[0];
	}
}


[numthreads(groupDim_x, 1, 1)]
void Raycast(uint3 threadId : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
	unsigned int tid = threadId.x;
	unsigned int i = groupId.x*groupDim_x + threadId.x;
	sdata[tid] = HitTriangle3(ray_origin, ray_direction, i);

	GroupMemoryBarrierWithGroupSync();

	ConditionalSwap(groupDim_x, sdata, 1024, sdata[tid].distance > sdata[tid + 512].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_x, sdata, 512, sdata[tid].distance > sdata[tid + 256].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_x, sdata, 256, sdata[tid].distance > sdata[tid + 128].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_x, sdata, 128, sdata[tid].distance > sdata[tid + 64].distance);
	GroupMemoryBarrierWithGroupSync();


	if (tid < 32)
	{
		ConditionalSwap32(groupDim_x, sdata, 64, sdata[tid].distance > sdata[tid + 32].distance);
		ConditionalSwap32(groupDim_x, sdata, 32, sdata[tid].distance > sdata[tid + 16].distance);
		ConditionalSwap32(groupDim_x, sdata, 16, sdata[tid].distance > sdata[tid + 8].distance);
		ConditionalSwap32(groupDim_x, sdata, 8, sdata[tid].distance > sdata[tid + 4].distance);
		ConditionalSwap32(groupDim_x, sdata, 4, sdata[tid].distance > sdata[tid + 2].distance);
		ConditionalSwap32(groupDim_x, sdata, 2, sdata[tid].distance > sdata[tid + 1].distance);
	}

	if (tid == 0)
	{
		if (raycasts[ray_index].distance > sdata[0].distance)
			raycasts[ray_index] = sdata[0];
	}
}

[numthreads(groupDim_sx, 1, 1)]
void CollectBlocks(uint3 threadId : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
	unsigned int tid = threadId.x;
	unsigned int i = groupId.x*groupDim_sx + threadId.x;

	if (i == 0)
		raycastsOut[ray_index].distance = 3.402823466e+37;	

	if(i >= raycasts_length)
		rdata[tid] = EmptyHit();
	else
		rdata[tid] = raycasts[i];
	GroupMemoryBarrierWithGroupSync();

	ConditionalSwap(groupDim_sx, rdata, 1024, rdata[tid].distance > rdata[tid + 512].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_sx, rdata, 512, rdata[tid].distance > rdata[tid + 256].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_sx, rdata, 256, rdata[tid].distance > rdata[tid + 128].distance);
	GroupMemoryBarrierWithGroupSync();
	ConditionalSwap(groupDim_sx, rdata, 128, rdata[tid].distance > rdata[tid + 64].distance);
	GroupMemoryBarrierWithGroupSync();

	if (tid < 32)
	{
		ConditionalSwap32(groupDim_sx, rdata, 64, rdata[tid].distance > rdata[tid + 32].distance);
		ConditionalSwap32(groupDim_sx, rdata, 32, rdata[tid].distance > rdata[tid + 16].distance);
		ConditionalSwap32(groupDim_sx, rdata, 16, rdata[tid].distance > rdata[tid + 8].distance);
		ConditionalSwap32(groupDim_sx, rdata, 8, rdata[tid].distance > rdata[tid + 4].distance);
		ConditionalSwap32(groupDim_sx, rdata, 4, rdata[tid].distance > rdata[tid + 2].distance);
		ConditionalSwap32(groupDim_sx, rdata, 2, rdata[tid].distance > rdata[tid + 1].distance);

		if (tid == 0)
		{
			raycasts[groupId.x] = rdata[0];
			raycastsOut[ray_index] = raycasts[0];
		}
	}
}



[numthreads(groupDim_x, 1, 1)]
void ClearBuffer(uint3 threadId : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
	unsigned int i = groupId.x*groupDim_x + threadId.x;

	raycasts[i].distance = 3.402823466e+37;
	raycasts[i].triangleIndex = -1;
}

RaycastHit EmptyHit()
{
	RaycastHit result;
	result.triangleIndex = -1;
	result.distance = 3.402823466e+37;
	result.uv = 0.0;
	return result;
}

RaycastHit HitTriangle(float3 rayO, float3 rayD, uint i)
{
	RaycastHit result = EmptyHit();

	// Intersection variables
	float3 pt0, pt1, pt2;
	float2 uv0, uv1, uv2;

	float distance;
	float u, v;

	float3 e1, e2, p, t, q;
	float det, inv_det;

	if (i < triangles.Length)
	{
		Triangle tr = triangles[i];

		pt0 = tr.v0; pt1 = tr.v1; pt2 = tr.v2;
		uv0 = tr.uv0; uv1 = tr.uv1; uv2 = tr.uv2;
		e1 = pt1 - pt0;
		e2 = pt2 - pt0;

		p = cross(rayD, e2);

		det = dot(e1, p);

		if (abs(det) > EPS)
		{
			inv_det = 1 / det;
			//calculate distance from p1 to ray origin
			t = rayO - pt0;

			//Calculate u parameter

			u = dot(t, p) * inv_det;

			if (u >= 0 && u <= 1)
			{
				//Prepare to test v parameter
				q = cross(t, e1);

				//Calculate v parameter
				v = dot(rayD, q) * inv_det;
				//

				if (v >= 0 && u + v <= 1)
				{
					distance = dot(e2, q) * inv_det;

					if (distance > det)
					{
						result.distance = distance;
						float w = 1.0f - u - v;
						result.uv = w * uv0 + u * uv1 + v * uv2;
						result.triangleIndex = i;
					}
				}
			}
		}

	}
	return result;
}
RaycastHit HitTriangle2(float3 rayO, float3 rayD, uint i)
{
	RaycastHit result = EmptyHit();
	// Intersection variables
	float3 pt0, pt1, pt2;
	float3 edge0, edge1, edge2, cross1, cross2, cross3, n;
	float angle1, angle2, angle3;
	float r, _a, b;
	float3 w0, I;

	//float2 uv0, uv1, uv2;


	if (i < triangles.Length)
	{
		Triangle tr = triangles[i];

		pt0 = tr.v0; pt1 = tr.v1; pt2 = tr.v2;
		//uv0 = tr.uv0; uv1 = tr.uv1; uv2 = tr.uv2;
		edge0 = rayO - pt0; edge1 = rayO - pt1; edge2 = rayO - pt2;

		if (dot(rayD, cross(edge0, edge1)) < 0.0 &&
			dot(rayD, cross(edge1, edge2)) < 0.0 &&
			dot(rayD, cross(edge2, edge0)) < 0.0)
		{
			n = normalize(cross(pt0 - pt1, pt0 - pt2));

			w0 = rayO - pt0;
			_a = -dot(n, w0);
			b = dot(n, rayD);
			r = _a / b;
			I = rayO + rayD * r;

			if (_a < 0.0)
			{
				//float w = 1.0f - u - v;
				//result.uv = w * uv0 + u * uv1 + v * uv2;
				result.distance = r;
				result.triangleIndex = i;
			}
		}
	}//
	return result;
}
RaycastHit HitTriangle3(float3 rayO, float3 rayD, uint i)
{	
	float range;
	RaycastHit hit = EmptyHit();
	if (i > prebuiltTrianglesConst.Length)
		return hit;
	PrebuiltTriangle t = prebuiltTrianglesConst[i];
	float det = dot(t.n0, rayD);
	float dett = t.d0 - dot(rayO, t.n0);
	float3 wr = rayO * det + rayD * dett;
	hit.uv.x = dot(wr, t.n1) + det * t.d1;
	hit.uv.y = dot(wr, t.n2) + det * t.d2;
	float tmpdet0 = det - hit.uv.x - hit.uv.y;
	int pdet0 = asint(tmpdet0);
	int pdetu = asint(hit.uv.x);
	int pdetv = asint(hit.uv.y);
	pdet0 =  pdet0 ^ pdetu;
	pdet0 = pdet0 | (pdetu ^ pdetv);
	if (pdet0 & 0x80000000)
		return hit;
	float rdet = 1 / det;
	hit.uv.x *= rdet;
	hit.uv.y *= rdet;
	range = dett * rdet;
	if (range > 0)
	{
		hit.triangleIndex = i;
		hit.distance = range;
	}
		
	
	return hit;
}

void PrebuildTriangles(uint i)
{
	float3 v0 = triangles[i].v0;
	float3 v1 = triangles[i].v1;
	float3 v2 = triangles[i].v2;
	float3 e1 = v1 - v0;
	float3 e2 = v2 - v0;
	prebuiltTriangles[i].n0 = cross(e1, e2);
	prebuiltTriangles[i].d0 = dot(prebuiltTriangles[i].n0, v0);

	float inv_denom = 1 / dot(prebuiltTriangles[i].n0, prebuiltTriangles[i].n0);

	prebuiltTriangles[i].n1 = cross(e2, prebuiltTriangles[i].n0) * inv_denom;
	prebuiltTriangles[i].d1 = -dot(prebuiltTriangles[i].n1, v0);

	prebuiltTriangles[i].n2 = cross(prebuiltTriangles[i].n0, e1) * inv_denom;
	prebuiltTriangles[i].d2 = -dot(prebuiltTriangles[i].n2, v0);
}
